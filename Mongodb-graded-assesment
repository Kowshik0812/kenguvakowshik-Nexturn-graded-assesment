 Collections and Insert Data: 

CUSTOMERS:

db.customers.insertMany([
  {
    "_id": "62f3f12e56f1bfa2d1f9b74e",
    "name": "kowshik",
    "email": "kowshik@example.com",
    "address": {
      "street": "sanka Street",
      "city": "Parvathipuram",
      "zipcode": "535501"
    },
    "phone": "9456123980",
    "registration_date":"2024-11-11"
  },
  {
    "_id": "62f3f12e56f1bfa2d1f9b74f",
    "name": "manoj",
    "email": "manoj@example.com",
    "address": {
      "street": "marine Street",
      "city": "Visakapatnam",
      "zipcode": "536501"
    },
    "phone": "9462863980",
    "registration_date":"2024-10-11"
  },
  {
    "_id": "62f3f12e56f1bfa2d1f9b750",
    "name": "Ajay",
    "email": "ajay@example.com",
    "address": {
      "street": "luker Street",
      "city": "Hyderabad",
      "zipcode": "537801"
    },
    "phone": "8796543990",
    "registration_date":"2024-9-10"
  },
  {
    "_id": "62f3f12e56f1bfa2d1f9b751",
    "name": "Kamal",
    "email": "kamal@example.com",
    "address": {
      "street": "green valley Street",
      "city": "Visakapatnam",
      "zipcode": "536501"
    },
    "phone": "7990633221",
    "registration_date":"2024-10-10"
  },
  {
    "_id": "62f3f12e56f1bfa2d1f9b752",
    "name": "Mehar",
    "email": "mehar@example.com",
    "address": {
      "street": "VIp Street",
      "city": "Visakapatnam",
      "zipcode": "536501"
    },
    "phone": "6309133555",
    "registration_date":"2024-11-11"
  }]);






Create the Collections and Insert Data: 


ORDERS:

db.orders.insertMany([
  {
    "order_id": "ORD123456",
    "customer_id": ObjectId("62f3f12e56f1bfa2d1f9b74e"),
    "order_date": ISODate("2024-11-11T16:30:00Z"),
    "status": "shipped",
    "items": [
      { "product_name": "Laptop", "quantity": 1, "price": 15000 },
      { "product_name": "Mouse", "quantity": 2, "price": 2500 }
    ],
    "total_value": 20000
  }]);
  {
    "order_id": "ORD123457",
    "customer_id": ObjectId("62f3f12e56f1bfa2d1f9b74f"),
    "order_date": ISODate("2024-10-20T10:00:00Z"),
    "status": "pending",
    "items": [
      { "product_name": "Tablet", "quantity": 1, "price": 3500 },
      { "product_name": "Keyboard", "quantity": 1, "price": 500 }
    ],
    "total_value": 4000
  },
  {
    "order_id": "ORD123458",
    "customer_id": ObjectId("62f3f12e56f1bfa2d1f9b750"), 
    "order_date": ISODate("2024-09-27T16:30:00Z"),
    "status": "delivered",
    "items": [
      { "product_name": "Monitor", "quantity": 1, "price": 2500 },
      { "product_name": "Cable", "quantity": 3, "price": 100 }
    ],
    "total_value": 2800
  },
  {
    "order_id": "ORD123459",
    "customer_id": ObjectId("62f3f12e56f1bfa2d1f9b751"), 
    "order_date":ISODate("2024-11-01T11:45:00Z"),
    "status": "shipped",
    "items": [
      { "product_name": "Iphone", "quantity": 1, "price": 75000 }
    ],
    "total_value": 75000
  },
  {
    "order_id": "ORD123460",
    "customer_id": ObjectId("62f3f12e56f1bfa2d1f9b752"), 
    "order_date": ISODate("2024-09-15T11:45:00Z"),
    "status": "pending",
    "items": [
      { "product_name": "Headphones", "quantity": 2, "price": 1000 },
      { "product_name": "Charger", "quantity": 1, "price": 250 }
    ],
    "total_value": 2250
  }
]);


1.2. Find Orders for a Specific Customer:

db.customers.findOne({ "name": "kowshik" });

1.3. Find the Customer for a Specific Order:

db.customers.findOne({ "_id":"62f3f12e56f1bfa2d1f9b74e" });

1.4. Update Order Status:

db.orders.updateOne({"order_id":"ORD123456"},
                    {$set: {"status": "delivered"}});
1.5. Delete an Order:

db.orders.deleteOne({"order_id": "ORD123456"});					




2.1. Calculate Total Value of All Orders by Customer:

db.orders.aggregate([
  
  {
    $lookup: {
      from: "customers", 
      localField: "customer_id", 
      foreignField: "_id", 
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $group: {
      _id: "$customer._id",  
      name: { $first: "$customer.name" },  
      total_order_value: { $sum: "$total_value" } 
    }
  }
]);

2.2. Group Orders by Status:

db.orders.aggregate([
  {
    $group: {
      _id: "$status",        
      count: { $sum: 1 }     
    }
  },
  {
    $sort: { count: -1 }  
  }
]);


2.3.List Customers with Their Recent Orders:


db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $sort: { order_date: -1 }
  },
  {
    $group: {
      _id: "$customer._id",
      name: { $first: "$customer.name" },
      email: { $first: "$customer.email" },
      most_recent_order: { $first: "$$ROOT" }  
    }
  },
  {
    $project: {
      name: 1,
      email: 1,
      order_id: "$most_recent_order.order_id",
      total_value: "$most_recent_order.total_value",
      order_date: "$most_recent_order.order_date"
    }
  }
]);

2.4. Find the Most Expensive Order by Customer:

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $sort: { total_value: -1 }
  },
  {
    $group: {
      _id: "$customer._id",
      name: { $first: "$customer.name" },
      email: { $first: "$customer.email" },
      most_expensive_order: { $first: "$$ROOT" }  
    }
  },
  {
    $project: {
      name: 1,
      email: 1,
      order_id: "$most_expensive_order.order_id",
      total_value: "$most_expensive_order.total_value",
      order_date: "$most_expensive_order.order_date"
    }
  }
]);




3.1. Find All Customers Who Placed Orders in the Last Month:


db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $match: {
      order_date: { $gte: new Date(new Date().setDate(new Date().getDate() - 30)) }
    }
  },
  {
    $sort: { order_date: -1 }
  },
  {
    $group: {
      _id: "$customer._id",
      name: { $first: "$customer.name" },
      email: { $first: "$customer.email" },
      most_recent_order_date: { $first: "$order_date" }
    }
  }
]);


3.2. Find All Products Ordered by a Specific Customer:


db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $match: { "customer.name": "Ajay" }
  },
  {
    $unwind: "$items"
  },
  {
    $group: {
      _id: "$items.product_name",  
      total_quantity: { $sum: "$items.quantity" } 
    }
  }
]);

3.3. Find the Top 3 Customers with the Most Expensive Total Orders:

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  {
    $unwind: "$customer"
  },
  {
    $group: {
      _id: "$customer._id",
      name: { $first: "$customer.name" },
      total_spent: { $sum: "$total_value" }  
    }
  },
  {
    $sort: { total_spent: -1 }
  },
  {
    $limit: 3
  }
]);


3.4. Add a New Order for an Existing Customer:


db.orders.insertOne({
  order_id: "ORD123460", 
  customer_id: "62f3f12e56f1bfa2d1f9b752",  
  order_date: new Date(), 
  status: "processing", 
  items: [
    { product_name: "Smartphone", quantity: 1, price: 600 },
    { product_name: "Headphones", quantity: 2, price: 50 }
  ],
  total_value: 1000  
});



4.1. Find Customers Who Have Not Placed Orders:

db.customers.aggregate([
  {
    $lookup: {
      from: "orders",        
      localField: "_id",    
      foreignField: "customer_id",  
      as: "orders"          
    }
  },
  {
    $match: {
      orders: { $size: 0 }  
    }
  },
  {
    $project: {
      name: 1,
      email: 1
    }
  }
]);


4.2. Calculate the Average Number of Items Ordered per Order:

db.orders.aggregate([
  {
    $unwind: "$items"
  },
  {
    $group: {
      _id: "$order_id",          
      total_items: { $sum: "$items.quantity" }  
    }
  },
  {
    $group: {
      _id: null,                    
      avg_items_per_order: { $avg: "$total_items" }  
    }
  }
]);

4.3. Join Customer and Order Data Using :

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",        
      localField: "customer_id", 
      foreignField: "_id",      
      as: "customer_info"       
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      name: "$customer_info.name",         
      email: "$customer_info.email",       
      order_id: 1,                         
      total_value: 1,                      
      order_date: 1                        
    }
  }
]);

